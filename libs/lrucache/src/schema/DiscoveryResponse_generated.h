// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISCOVERYRESPONSE_LRUCACHE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_DISCOVERYRESPONSE_LRUCACHE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Endpoint_generated.h"

namespace lrucache {
namespace schema {

struct DiscoveryResponse;
struct DiscoveryResponseBuilder;

struct DiscoveryResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DiscoveryResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENDPOINTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<lrucache::schema::Endpoint>> *endpoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<lrucache::schema::Endpoint>> *>(VT_ENDPOINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENDPOINTS) &&
           verifier.VerifyVector(endpoints()) &&
           verifier.VerifyVectorOfTables(endpoints()) &&
           verifier.EndTable();
  }
};

struct DiscoveryResponseBuilder {
  typedef DiscoveryResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_endpoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<lrucache::schema::Endpoint>>> endpoints) {
    fbb_.AddOffset(DiscoveryResponse::VT_ENDPOINTS, endpoints);
  }
  explicit DiscoveryResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DiscoveryResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DiscoveryResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DiscoveryResponse> CreateDiscoveryResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<lrucache::schema::Endpoint>>> endpoints = 0) {
  DiscoveryResponseBuilder builder_(_fbb);
  builder_.add_endpoints(endpoints);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DiscoveryResponse> CreateDiscoveryResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<lrucache::schema::Endpoint>> *endpoints = nullptr) {
  auto endpoints__ = endpoints ? _fbb.CreateVector<::flatbuffers::Offset<lrucache::schema::Endpoint>>(*endpoints) : 0;
  return lrucache::schema::CreateDiscoveryResponse(
      _fbb,
      endpoints__);
}

inline const lrucache::schema::DiscoveryResponse *GetDiscoveryResponse(const void *buf) {
  return ::flatbuffers::GetRoot<lrucache::schema::DiscoveryResponse>(buf);
}

inline const lrucache::schema::DiscoveryResponse *GetSizePrefixedDiscoveryResponse(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<lrucache::schema::DiscoveryResponse>(buf);
}

inline bool VerifyDiscoveryResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lrucache::schema::DiscoveryResponse>(nullptr);
}

inline bool VerifySizePrefixedDiscoveryResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<lrucache::schema::DiscoveryResponse>(nullptr);
}

inline void FinishDiscoveryResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::DiscoveryResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDiscoveryResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::DiscoveryResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace lrucache

#endif  // FLATBUFFERS_GENERATED_DISCOVERYRESPONSE_LRUCACHE_SCHEMA_H_
