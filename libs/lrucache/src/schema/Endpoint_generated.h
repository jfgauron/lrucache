// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENDPOINT_LRUCACHE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ENDPOINT_LRUCACHE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace lrucache {
namespace schema {

struct Endpoint;
struct EndpointBuilder;

struct Geolocation;
struct GeolocationBuilder;

struct Endpoint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EndpointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOST = 4,
    VT_PORT = 6,
    VT_LEADER = 8,
    VT_LOCATION = 10
  };
  const ::flatbuffers::String *host() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOST);
  }
  int16_t port() const {
    return GetField<int16_t>(VT_PORT, 0);
  }
  bool leader() const {
    return GetField<uint8_t>(VT_LEADER, 0) != 0;
  }
  const lrucache::schema::Geolocation *location() const {
    return GetPointer<const lrucache::schema::Geolocation *>(VT_LOCATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOST) &&
           verifier.VerifyString(host()) &&
           VerifyField<int16_t>(verifier, VT_PORT, 2) &&
           VerifyField<uint8_t>(verifier, VT_LEADER, 1) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyTable(location()) &&
           verifier.EndTable();
  }
};

struct EndpointBuilder {
  typedef Endpoint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_host(::flatbuffers::Offset<::flatbuffers::String> host) {
    fbb_.AddOffset(Endpoint::VT_HOST, host);
  }
  void add_port(int16_t port) {
    fbb_.AddElement<int16_t>(Endpoint::VT_PORT, port, 0);
  }
  void add_leader(bool leader) {
    fbb_.AddElement<uint8_t>(Endpoint::VT_LEADER, static_cast<uint8_t>(leader), 0);
  }
  void add_location(::flatbuffers::Offset<lrucache::schema::Geolocation> location) {
    fbb_.AddOffset(Endpoint::VT_LOCATION, location);
  }
  explicit EndpointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Endpoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Endpoint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Endpoint> CreateEndpoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> host = 0,
    int16_t port = 0,
    bool leader = false,
    ::flatbuffers::Offset<lrucache::schema::Geolocation> location = 0) {
  EndpointBuilder builder_(_fbb);
  builder_.add_location(location);
  builder_.add_host(host);
  builder_.add_port(port);
  builder_.add_leader(leader);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Endpoint> CreateEndpointDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *host = nullptr,
    int16_t port = 0,
    bool leader = false,
    ::flatbuffers::Offset<lrucache::schema::Geolocation> location = 0) {
  auto host__ = host ? _fbb.CreateString(host) : 0;
  return lrucache::schema::CreateEndpoint(
      _fbb,
      host__,
      port,
      leader,
      location);
}

struct Geolocation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeolocationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LATITUDE = 4,
    VT_LONGITUDE = 6
  };
  double latitude() const {
    return GetField<double>(VT_LATITUDE, 0.0);
  }
  double longitude() const {
    return GetField<double>(VT_LONGITUDE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_LATITUDE, 8) &&
           VerifyField<double>(verifier, VT_LONGITUDE, 8) &&
           verifier.EndTable();
  }
};

struct GeolocationBuilder {
  typedef Geolocation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_latitude(double latitude) {
    fbb_.AddElement<double>(Geolocation::VT_LATITUDE, latitude, 0.0);
  }
  void add_longitude(double longitude) {
    fbb_.AddElement<double>(Geolocation::VT_LONGITUDE, longitude, 0.0);
  }
  explicit GeolocationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geolocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geolocation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geolocation> CreateGeolocation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double latitude = 0.0,
    double longitude = 0.0) {
  GeolocationBuilder builder_(_fbb);
  builder_.add_longitude(longitude);
  builder_.add_latitude(latitude);
  return builder_.Finish();
}

inline const lrucache::schema::Endpoint *GetEndpoint(const void *buf) {
  return ::flatbuffers::GetRoot<lrucache::schema::Endpoint>(buf);
}

inline const lrucache::schema::Endpoint *GetSizePrefixedEndpoint(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<lrucache::schema::Endpoint>(buf);
}

inline bool VerifyEndpointBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lrucache::schema::Endpoint>(nullptr);
}

inline bool VerifySizePrefixedEndpointBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<lrucache::schema::Endpoint>(nullptr);
}

inline void FinishEndpointBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Endpoint> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEndpointBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Endpoint> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace lrucache

#endif  // FLATBUFFERS_GENERATED_ENDPOINT_LRUCACHE_SCHEMA_H_
