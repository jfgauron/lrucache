// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_LRUCACHE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_MESSAGE_LRUCACHE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Request_generated.h"
#include "Response_generated.h"

namespace lrucache {
namespace schema {

struct Message;
struct MessageBuilder;

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_Response = 1,
  MessageContent_Request = 2,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_Request
};

inline const MessageContent (&EnumValuesMessageContent())[3] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_Response,
    MessageContent_Request
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[4] = {
    "NONE",
    "Response",
    "Request",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_Request)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<lrucache::schema::Response> {
  static const MessageContent enum_value = MessageContent_Response;
};

template<> struct MessageContentTraits<lrucache::schema::Request> {
  static const MessageContent enum_value = MessageContent_Request;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  lrucache::schema::MessageContent content_type() const {
    return static_cast<lrucache::schema::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const lrucache::schema::Response *content_as_Response() const {
    return content_type() == lrucache::schema::MessageContent_Response ? static_cast<const lrucache::schema::Response *>(content()) : nullptr;
  }
  const lrucache::schema::Request *content_as_Request() const {
    return content_type() == lrucache::schema::MessageContent_Request ? static_cast<const lrucache::schema::Request *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const lrucache::schema::Response *Message::content_as<lrucache::schema::Response>() const {
  return content_as_Response();
}

template<> inline const lrucache::schema::Request *Message::content_as<lrucache::schema::Request>() const {
  return content_as_Request();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_content_type(lrucache::schema::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(Message::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(Message::VT_CONTENT, content);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    lrucache::schema::MessageContent content_type = lrucache::schema::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_Response: {
      auto ptr = reinterpret_cast<const lrucache::schema::Response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_Request: {
      auto ptr = reinterpret_cast<const lrucache::schema::Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const lrucache::schema::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<lrucache::schema::Message>(buf);
}

inline const lrucache::schema::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<lrucache::schema::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lrucache::schema::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<lrucache::schema::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace lrucache

#endif  // FLATBUFFERS_GENERATED_MESSAGE_LRUCACHE_SCHEMA_H_
