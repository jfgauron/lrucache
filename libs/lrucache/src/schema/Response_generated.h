// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_LRUCACHE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_RESPONSE_LRUCACHE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "DiscoveryResponse_generated.h"

namespace lrucache {
namespace schema {

struct Response;
struct ResponseBuilder;

enum ResponseContent : uint8_t {
  ResponseContent_NONE = 0,
  ResponseContent_DiscoveryResponse = 1,
  ResponseContent_MIN = ResponseContent_NONE,
  ResponseContent_MAX = ResponseContent_DiscoveryResponse
};

inline const ResponseContent (&EnumValuesResponseContent())[2] {
  static const ResponseContent values[] = {
    ResponseContent_NONE,
    ResponseContent_DiscoveryResponse
  };
  return values;
}

inline const char * const *EnumNamesResponseContent() {
  static const char * const names[3] = {
    "NONE",
    "DiscoveryResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponseContent(ResponseContent e) {
  if (::flatbuffers::IsOutRange(e, ResponseContent_NONE, ResponseContent_DiscoveryResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponseContent()[index];
}

template<typename T> struct ResponseContentTraits {
  static const ResponseContent enum_value = ResponseContent_NONE;
};

template<> struct ResponseContentTraits<lrucache::schema::DiscoveryResponse> {
  static const ResponseContent enum_value = ResponseContent_DiscoveryResponse;
};

bool VerifyResponseContent(::flatbuffers::Verifier &verifier, const void *obj, ResponseContent type);
bool VerifyResponseContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  lrucache::schema::ResponseContent content_type() const {
    return static_cast<lrucache::schema::ResponseContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const lrucache::schema::DiscoveryResponse *content_as_DiscoveryResponse() const {
    return content_type() == lrucache::schema::ResponseContent_DiscoveryResponse ? static_cast<const lrucache::schema::DiscoveryResponse *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyResponseContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const lrucache::schema::DiscoveryResponse *Response::content_as<lrucache::schema::DiscoveryResponse>() const {
  return content_as_DiscoveryResponse();
}

struct ResponseBuilder {
  typedef Response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_content_type(lrucache::schema::ResponseContent content_type) {
    fbb_.AddElement<uint8_t>(Response::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(Response::VT_CONTENT, content);
  }
  explicit ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Response> CreateResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    lrucache::schema::ResponseContent content_type = lrucache::schema::ResponseContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyResponseContent(::flatbuffers::Verifier &verifier, const void *obj, ResponseContent type) {
  switch (type) {
    case ResponseContent_NONE: {
      return true;
    }
    case ResponseContent_DiscoveryResponse: {
      auto ptr = reinterpret_cast<const lrucache::schema::DiscoveryResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponseContent(
        verifier,  values->Get(i), types->GetEnum<ResponseContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const lrucache::schema::Response *GetResponse(const void *buf) {
  return ::flatbuffers::GetRoot<lrucache::schema::Response>(buf);
}

inline const lrucache::schema::Response *GetSizePrefixedResponse(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<lrucache::schema::Response>(buf);
}

inline bool VerifyResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lrucache::schema::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<lrucache::schema::Response>(nullptr);
}

inline void FinishResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<lrucache::schema::Response> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace lrucache

#endif  // FLATBUFFERS_GENERATED_RESPONSE_LRUCACHE_SCHEMA_H_
